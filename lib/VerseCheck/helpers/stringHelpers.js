"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSelection = exports.normalizeString = exports.occurrencesInString = void 0;

/* eslint-disable no-console */

/**
 * @description Function that count occurrences of a substring in a string
 * @param {String} string - The string to search in
 * @param {String} subString - The sub string to search for
 * @returns {Integer} - the count of the occurrences
 * @see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
 * modified to fit our use cases, return zero for '' substring, and no use case for overlapping.
 */
var occurrencesInString = function occurrencesInString(string, subString) {
  if (subString.length <= 0) {
    return 0;
  }

  var occurrences = 0,
      position = 0,
      step = subString.length;

  while (position < string.length) {
    position = string.indexOf(subString, position);

    if (position === -1) {
      break;
    }

    ++occurrences;
    position += step;
  }

  return occurrences;
};
/**
 * @description - Function that normalizes a string including whitespace
 * @param {String} string - the string to normalize
 * @preturns {String} - The returned normalized string
 */


exports.occurrencesInString = occurrencesInString;

var normalizeString = function normalizeString(string) {
  string = string.replace(/\s+/g, ' ');
  return string;
};
/**
 * @description - generates a selection object from the selected text, prescedingText and whole text
 * @param {String} selectedText - the text that is selected
 * @param {String} prescedingText - the text that prescedes the selection
 * @param {String} entireText - the text that the selection should be in
 * @return {Object} - the selection object to be used
 */


exports.normalizeString = normalizeString;

var generateSelection = function generateSelection(selectedText, prescedingText, entireText) {
  var selection = {}; // response
  // replace more than one contiguous space with a single one since HTML/selection only renders 1

  entireText = normalizeString(entireText); // get the occurrences before this one

  var prescedingOccurrences = occurrencesInString(prescedingText, selectedText); // calculate this occurrence number by adding it to the presceding ones

  var occurrence = prescedingOccurrences + 1; // get the total occurrences from the verse

  var occurrences = occurrencesInString(entireText, selectedText);
  selection = {
    text: selectedText,
    occurrence: occurrence,
    occurrences: occurrences
  };
  return selection;
};

exports.generateSelection = generateSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9WZXJzZUNoZWNrL2hlbHBlcnMvc3RyaW5nSGVscGVycy5qcyJdLCJuYW1lcyI6WyJvY2N1cnJlbmNlc0luU3RyaW5nIiwic3RyaW5nIiwic3ViU3RyaW5nIiwibGVuZ3RoIiwib2NjdXJyZW5jZXMiLCJwb3NpdGlvbiIsInN0ZXAiLCJpbmRleE9mIiwibm9ybWFsaXplU3RyaW5nIiwicmVwbGFjZSIsImdlbmVyYXRlU2VsZWN0aW9uIiwic2VsZWN0ZWRUZXh0IiwicHJlc2NlZGluZ1RleHQiLCJlbnRpcmVUZXh0Iiwic2VsZWN0aW9uIiwicHJlc2NlZGluZ09jY3VycmVuY2VzIiwib2NjdXJyZW5jZSIsInRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFRTyxJQUFNQSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNDLE1BQUQsRUFBU0MsU0FBVCxFQUF1QjtBQUN4RCxNQUFJQSxTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDekIsV0FBTyxDQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsV0FBVyxHQUFHLENBQWxCO0FBQUEsTUFBcUJDLFFBQVEsR0FBRyxDQUFoQztBQUFBLE1BQW1DQyxJQUFJLEdBQUdKLFNBQVMsQ0FBQ0MsTUFBcEQ7O0FBRUEsU0FBT0UsUUFBUSxHQUFHSixNQUFNLENBQUNFLE1BQXpCLEVBQWlDO0FBQy9CRSxJQUFBQSxRQUFRLEdBQUdKLE1BQU0sQ0FBQ00sT0FBUCxDQUFlTCxTQUFmLEVBQTBCRyxRQUExQixDQUFYOztBQUVBLFFBQUlBLFFBQVEsS0FBSyxDQUFDLENBQWxCLEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0QsTUFBRUQsV0FBRjtBQUNBQyxJQUFBQSxRQUFRLElBQUlDLElBQVo7QUFDRDs7QUFDRCxTQUFPRixXQUFQO0FBQ0QsQ0FqQk07QUFrQlA7Ozs7Ozs7OztBQUtPLElBQU1JLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ1AsTUFBRCxFQUFZO0FBQ3pDQSxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlLE1BQWYsRUFBdUIsR0FBdkIsQ0FBVDtBQUNBLFNBQU9SLE1BQVA7QUFDRCxDQUhNO0FBSVA7Ozs7Ozs7Ozs7O0FBT08sSUFBTVMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDQyxZQUFELEVBQWVDLGNBQWYsRUFBK0JDLFVBQS9CLEVBQThDO0FBQzdFLE1BQUlDLFNBQVMsR0FBRyxFQUFoQixDQUQ2RSxDQUN6RDtBQUNwQjs7QUFDQUQsRUFBQUEsVUFBVSxHQUFHTCxlQUFlLENBQUNLLFVBQUQsQ0FBNUIsQ0FINkUsQ0FJN0U7O0FBQ0EsTUFBSUUscUJBQXFCLEdBQUdmLG1CQUFtQixDQUFDWSxjQUFELEVBQWlCRCxZQUFqQixDQUEvQyxDQUw2RSxDQU03RTs7QUFDQSxNQUFJSyxVQUFVLEdBQUdELHFCQUFxQixHQUFHLENBQXpDLENBUDZFLENBUTdFOztBQUNBLE1BQUlYLFdBQVcsR0FBR0osbUJBQW1CLENBQUNhLFVBQUQsRUFBYUYsWUFBYixDQUFyQztBQUVBRyxFQUFBQSxTQUFTLEdBQUc7QUFDVkcsSUFBQUEsSUFBSSxFQUFFTixZQURJO0FBRVZLLElBQUFBLFVBQVUsRUFBRUEsVUFGRjtBQUdWWixJQUFBQSxXQUFXLEVBQUVBO0FBSEgsR0FBWjtBQUtBLFNBQU9VLFNBQVA7QUFDRCxDQWpCTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbi8qKlxuICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRoYXQgY291bnQgb2NjdXJyZW5jZXMgb2YgYSBzdWJzdHJpbmcgaW4gYSBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBpblxuICogQHBhcmFtIHtTdHJpbmd9IHN1YlN0cmluZyAtIFRoZSBzdWIgc3RyaW5nIHRvIHNlYXJjaCBmb3JcbiAqIEByZXR1cm5zIHtJbnRlZ2VyfSAtIHRoZSBjb3VudCBvZiB0aGUgb2NjdXJyZW5jZXNcbiAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MDA5NzU2L2hvdy10by1jb3VudC1zdHJpbmctb2NjdXJyZW5jZS1pbi1zdHJpbmcvNzkyNDI0MCM3OTI0MjQwXG4gKiBtb2RpZmllZCB0byBmaXQgb3VyIHVzZSBjYXNlcywgcmV0dXJuIHplcm8gZm9yICcnIHN1YnN0cmluZywgYW5kIG5vIHVzZSBjYXNlIGZvciBvdmVybGFwcGluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IG9jY3VycmVuY2VzSW5TdHJpbmcgPSAoc3RyaW5nLCBzdWJTdHJpbmcpID0+IHtcbiAgaWYgKHN1YlN0cmluZy5sZW5ndGggPD0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIG9jY3VycmVuY2VzID0gMCwgcG9zaXRpb24gPSAwLCBzdGVwID0gc3ViU3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAocG9zaXRpb24gPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHJpbmcuaW5kZXhPZihzdWJTdHJpbmcsIHBvc2l0aW9uKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK29jY3VycmVuY2VzO1xuICAgIHBvc2l0aW9uICs9IHN0ZXA7XG4gIH1cbiAgcmV0dXJuIG9jY3VycmVuY2VzO1xufTtcbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gRnVuY3Rpb24gdGhhdCBub3JtYWxpemVzIGEgc3RyaW5nIGluY2x1ZGluZyB3aGl0ZXNwYWNlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIC0gdGhlIHN0cmluZyB0byBub3JtYWxpemVcbiAqIEBwcmV0dXJucyB7U3RyaW5nfSAtIFRoZSByZXR1cm5lZCBub3JtYWxpemVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplU3RyaW5nID0gKHN0cmluZykgPT4ge1xuICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gZ2VuZXJhdGVzIGEgc2VsZWN0aW9uIG9iamVjdCBmcm9tIHRoZSBzZWxlY3RlZCB0ZXh0LCBwcmVzY2VkaW5nVGV4dCBhbmQgd2hvbGUgdGV4dFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdGVkVGV4dCAtIHRoZSB0ZXh0IHRoYXQgaXMgc2VsZWN0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVzY2VkaW5nVGV4dCAtIHRoZSB0ZXh0IHRoYXQgcHJlc2NlZGVzIHRoZSBzZWxlY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBlbnRpcmVUZXh0IC0gdGhlIHRleHQgdGhhdCB0aGUgc2VsZWN0aW9uIHNob3VsZCBiZSBpblxuICogQHJldHVybiB7T2JqZWN0fSAtIHRoZSBzZWxlY3Rpb24gb2JqZWN0IHRvIGJlIHVzZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU2VsZWN0aW9uID0gKHNlbGVjdGVkVGV4dCwgcHJlc2NlZGluZ1RleHQsIGVudGlyZVRleHQpID0+IHtcbiAgbGV0IHNlbGVjdGlvbiA9IHt9OyAvLyByZXNwb25zZVxuICAvLyByZXBsYWNlIG1vcmUgdGhhbiBvbmUgY29udGlndW91cyBzcGFjZSB3aXRoIGEgc2luZ2xlIG9uZSBzaW5jZSBIVE1ML3NlbGVjdGlvbiBvbmx5IHJlbmRlcnMgMVxuICBlbnRpcmVUZXh0ID0gbm9ybWFsaXplU3RyaW5nKGVudGlyZVRleHQpO1xuICAvLyBnZXQgdGhlIG9jY3VycmVuY2VzIGJlZm9yZSB0aGlzIG9uZVxuICBsZXQgcHJlc2NlZGluZ09jY3VycmVuY2VzID0gb2NjdXJyZW5jZXNJblN0cmluZyhwcmVzY2VkaW5nVGV4dCwgc2VsZWN0ZWRUZXh0KTtcbiAgLy8gY2FsY3VsYXRlIHRoaXMgb2NjdXJyZW5jZSBudW1iZXIgYnkgYWRkaW5nIGl0IHRvIHRoZSBwcmVzY2VkaW5nIG9uZXNcbiAgbGV0IG9jY3VycmVuY2UgPSBwcmVzY2VkaW5nT2NjdXJyZW5jZXMgKyAxO1xuICAvLyBnZXQgdGhlIHRvdGFsIG9jY3VycmVuY2VzIGZyb20gdGhlIHZlcnNlXG4gIGxldCBvY2N1cnJlbmNlcyA9IG9jY3VycmVuY2VzSW5TdHJpbmcoZW50aXJlVGV4dCwgc2VsZWN0ZWRUZXh0KTtcblxuICBzZWxlY3Rpb24gPSB7XG4gICAgdGV4dDogc2VsZWN0ZWRUZXh0LFxuICAgIG9jY3VycmVuY2U6IG9jY3VycmVuY2UsXG4gICAgb2NjdXJyZW5jZXM6IG9jY3VycmVuY2VzLFxuICB9O1xuICByZXR1cm4gc2VsZWN0aW9uO1xufTtcbiJdfQ==