"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _lodash = _interopRequireDefault(require("lodash"));

var _selectionHelpers = require("../selectionHelpers");

/* eslint-env jest */

/* eslint-disable object-curly-newline */
// constants
var ZERO_WIDTH_SPACE = "\u200B";
var ZERO_WIDTH_JOINER = "\u2060";
var ZERO_WIDTH_NO_BREAK_SPACE = "\uFEFF";
describe('selectionHelpers.optimizeSelections', function () {
  var string = 'This is a random quote string for testing the odd  random quote   ';
  it('should not trim valid selections', function () {
    // given
    var selections_ = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(selections_);
  });
  it('should trim leading spaces', function () {
    // given
    var selections_ = [{
      text: ' is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: '  random quote',
      occurrence: 1,
      occurrences: 1
    }];
    var expectedSelections = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should not hang on leading spaces with invalid occurrence', function () {
    // given
    var selections_ = [{
      text: ' is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: '  random quote',
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should trim trailing spaces', function () {
    // given
    var selections_ = [{
      text: 'is a ',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote  ',
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should remove empty selections', function () {
    // given
    var selections_ = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: '',
      occurrence: 1,
      occurrences: 0
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should remove space selections', function () {
    // given
    var selections_ = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: '  ',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random quote',
      occurrence: 2,
      occurrences: 2
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should have correct occurrence when removing spaces from " a "', function () {
    // given
    var string = 'And everyone who speaks a word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: ' a ',
      occurrence: 1,
      occurrences: 1
    }];
    var expectedSelections = [{
      text: 'a',
      occurrence: 2,
      occurrences: 5
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should have correct occurrence when removing spaces from " a"', function () {
    // given
    var string = 'And everyone who speaks a word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: ' a',
      occurrence: 1,
      occurrences: 1
    }];
    var expectedSelections = [{
      text: 'a',
      occurrence: 2,
      occurrences: 5
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should have correct occurrence when removing spaces from "a "', function () {
    // given
    var string = 'And everyone who speaka a word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: 'a ',
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'a',
      occurrence: 3,
      occurrences: 6
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should have correct occurrence when removing special spaces on trailing side', function () {
    // given
    var SPACES = ZERO_WIDTH_JOINER + ZERO_WIDTH_SPACE + ZERO_WIDTH_NO_BREAK_SPACE + ' ';
    var string = 'And everyone who speaka' + SPACES + 'a' + SPACES + 'word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: 'a' + SPACES,
      occurrence: 2,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'a',
      occurrence: 3,
      occurrences: 6
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should have correct occurrence when removing special spaces on both sides', function () {
    // given
    var SPACES = ZERO_WIDTH_JOINER + ZERO_WIDTH_SPACE + ZERO_WIDTH_NO_BREAK_SPACE + ' ';
    var string = 'And everyone who speaka' + SPACES + 'a' + SPACES + 'word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: SPACES + 'a' + SPACES,
      occurrence: 1,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'a',
      occurrence: 3,
      occurrences: 6
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should join contiguous selected words', function () {
    // given
    var selections_ = [{
      text: 'is a',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random',
      occurrence: 1,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a random',
      occurrence: 1,
      occurrences: 1
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should join and trim contiguous selected words', function () {
    // given
    var selections_ = [{
      text: 'is a ',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'random ',
      occurrence: 1,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a random',
      occurrence: 1,
      occurrences: 1
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should join and trim contiguous selections', function () {
    // given
    var selections_ = [{
      text: 'is a r',
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'andom ',
      occurrence: 1,
      occurrences: 2
    }];
    var expectedSelections = [{
      text: 'is a random',
      occurrence: 1,
      occurrences: 1
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
  it('should trim and join contiguous selected words separated by unicode spaces', function () {
    // given
    var SPACES = ZERO_WIDTH_JOINER + ZERO_WIDTH_SPACE + ZERO_WIDTH_NO_BREAK_SPACE + ' ';
    var string = 'And everyone who speaks' + SPACES + 'a' + SPACES + 'word against the Son of Man, it will be forgiven him, ';
    var selections_ = [{
      text: ' everyone who speaks',
      occurrence: 1,
      occurrences: 1
    }, {
      text: SPACES + 'a' + SPACES,
      occurrence: 1,
      occurrences: 1
    }, {
      text: 'word ',
      occurrence: 1,
      occurrences: 1
    }];
    var expectedSelections = [{
      text: 'everyone who speaks' + SPACES + 'a' + SPACES + 'word',
      occurrence: 1,
      occurrences: 1
    }]; // when

    var selections = (0, _selectionHelpers.optimizeSelections)(string, _lodash["default"].cloneDeep(selections_)); // then

    expect(selections).toEqual(expectedSelections);
  });
});
describe('selectionHelpers.unicodeTrim', function () {
  it('should trim space', function () {
    // given
    var selectedText = ' is ';
    var expectedTrimmed = 'is'; // when

    var trimmedText = (0, _selectionHelpers.unicodeTrim)(selectedText); // then

    expect(trimmedText).toEqual(expectedTrimmed);
  });
  it('should trim ZERO_WIDTH_SPACE', function () {
    // given
    var selectedText = ZERO_WIDTH_SPACE + ' is ' + ZERO_WIDTH_SPACE;
    var expectedTrimmed = 'is'; // when

    var trimmedText = (0, _selectionHelpers.unicodeTrim)(selectedText); // then

    expect(trimmedText).toEqual(expectedTrimmed);
  });
  it('should trim ZERO_WIDTH_JOINER', function () {
    // given
    var selectedText = ZERO_WIDTH_JOINER + ' is ' + ZERO_WIDTH_JOINER;
    var expectedTrimmed = 'is'; // when

    var trimmedText = (0, _selectionHelpers.unicodeTrim)(selectedText); // then

    expect(trimmedText).toEqual(expectedTrimmed);
  });
  it('should trim ZERO_WIDTH_NO_BREAK_SPACE', function () {
    // given
    var selectedText = ZERO_WIDTH_NO_BREAK_SPACE + ' is ' + ZERO_WIDTH_NO_BREAK_SPACE;
    var expectedTrimmed = 'is'; // when

    var trimmedText = (0, _selectionHelpers.unicodeTrim)(selectedText); // then

    expect(trimmedText).toEqual(expectedTrimmed);
  });
  it('should trim misc special characters', function () {
    // given
    var selectedText = ZERO_WIDTH_JOINER + ZERO_WIDTH_SPACE + ZERO_WIDTH_NO_BREAK_SPACE + ' is ' + ZERO_WIDTH_JOINER + ZERO_WIDTH_SPACE + ZERO_WIDTH_NO_BREAK_SPACE;
    var expectedTrimmed = 'is'; // when

    var trimmedText = (0, _selectionHelpers.unicodeTrim)(selectedText); // then

    expect(trimmedText).toEqual(expectedTrimmed);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,