"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldRenderEllipsis = shouldRenderEllipsis;
exports.getPrescedingTextFromElementSiblings = exports.getPrescedingTextFromElement = exports.getPrescedingTextFromElementAndSiblings = exports.getPrescedingTextFromWindowSelection = exports.getSelectedTextFromWindowSelection = exports.getCurrentWindowSelection = exports.getSelectionFromCurrentWindowSelection = void 0;

var stringHelpers = _interopRequireWildcard(require("./stringHelpers"));

/**
 * @description - Gets the selection object from the currently selected text from the Web UI
 * @param {String} entireText - the text that the selection should be in, ie verseText
 * @return {Object} - the selection object to be used
 * TODO: Find a way to test
 */
var getSelectionFromCurrentWindowSelection = function getSelectionFromCurrentWindowSelection(entireText) {
  var selection; // response

  var windowSelection = getCurrentWindowSelection();
  var selectedText = getSelectedTextFromWindowSelection(windowSelection);
  var prescedingText = getPrescedingTextFromWindowSelection(windowSelection); // Some edge cases leave a weird selection remaining, let's clean up.

  selection = stringHelpers.generateSelection(selectedText, prescedingText, entireText);
  window.getSelection().empty();
  return selection;
};
/**
* @description - Gets the window's Selection from the UI
* @return {Object} windowSelection - a windowSelection object from inside a compatible element
* TODO: Find a way to test
*/


exports.getSelectionFromCurrentWindowSelection = getSelectionFromCurrentWindowSelection;

var getCurrentWindowSelection = function getCurrentWindowSelection() {
  return window.getSelection();
};
/**
* @description - Gets the window selected text from the windowSelection
* @param {Object} windowSelection - a windowSelection object from inside a compatible element
* @return {String} - selectedText
* TODO: Find a way to test
*/


exports.getCurrentWindowSelection = getCurrentWindowSelection;

var getSelectedTextFromWindowSelection = function getSelectedTextFromWindowSelection(windowSelection) {
  return windowSelection.toString();
};
/**
* @description - Gets the prescedingText from the windowSelection
* @param {Object} windowSelection - a windowSelection object from inside a compatible element
* @return {String} - the string of prescedingText
* Implementation notes on why you can't just use the window.getSelection()
* getSelection is limited by same innerText node, and does not include span siblings
* indexOfTextSelection is broken by any other previous selection since it only knows its innerText node.
* TODO: Find a way to test
*/


exports.getSelectedTextFromWindowSelection = getSelectedTextFromWindowSelection;

var getPrescedingTextFromWindowSelection = function getPrescedingTextFromWindowSelection(windowSelection) {
  var prescedingText; // response
  // concatenate spans etc... to get the prescedingText from the windowSelection

  var selectedText = getSelectedTextFromWindowSelection(windowSelection); // do nothing since an empty space was selected

  if (selectedText !== '') {
    // get the text after the presceding selection and current span selection is in.
    var selectionRange = windowSelection.getRangeAt(0); // get the character index of what is selected in context of the span it is in.

    var selectionRangeStart = selectionRange.startOffset; // get the container of the selection, this is a strange object, that logs as a string.

    var textContainer = selectionRange.commonAncestorContainer; // get the parent span that contains the textContainer.

    var element; // if the textContainer is #text, then use the parentElement - usually non-overlapping selection

    if ('#text' === textContainer.nodeName) {
      element = textContainer.parentElement;
    } // if the textContainer is a span, then use it as the element


    if ('SPAN' === textContainer.nodeName) {
      element = textContainer;
    } // if the textContainer is a div, its an overlapping selection, don't use commonAncestorContainer


    if ('DIV' === textContainer.nodeName) {
      element = selectionRange.startContainer.parentElement;
    } // check for element, as textContainer can but rarely be something other than #text, span or div


    if (element) {
      prescedingText = getPrescedingTextFromElementAndSiblings(element, selectionRangeStart, windowSelection);
    }
  }

  return prescedingText;
};
/**
 * @description - gets the prescedingText from the element ending at the selectionRangeStart
 * @param {Element} element - the html element that has text and siblings with text
 * @param {Int} selectionRangeStart - the character index of the start of the selection
 * @return {String} - the string of prescedingText
 */


exports.getPrescedingTextFromWindowSelection = getPrescedingTextFromWindowSelection;

var getPrescedingTextFromElementAndSiblings = function getPrescedingTextFromElementAndSiblings(element, selectionRangeStart, windowSelection) {
  var prescedingText; // response

  var prescedingTextFromElementSiblings = getPrescedingTextFromElementSiblings(element, windowSelection);
  var prescedingTextFromElement = getPrescedingTextFromElement(element, selectionRangeStart, windowSelection);
  prescedingText = prescedingTextFromElementSiblings + prescedingTextFromElement;
  return prescedingText;
};
/**
 * @description - gets the prescedingText from the element ending at the selectionRangeStart
 * @param {Element} element - the html element that has text
 * @param {Int} selectionRangeStart - the character index of the start of the selection
 * @return {String} - the string of prescedingText
 */


exports.getPrescedingTextFromElementAndSiblings = getPrescedingTextFromElementAndSiblings;

var getPrescedingTextFromElement = function getPrescedingTextFromElement(element, selectionRangeStart) {
  var prescedingText; // response

  var text = element.textContent;
  prescedingText = text.slice(0, selectionRangeStart);
  return prescedingText;
};
/**
 * @description - gets the prescedingText from the element siblings
 * @param {Element} element - the html element that has text and siblings with text
 * @return {String} - the string of prescedingText
 */


exports.getPrescedingTextFromElement = getPrescedingTextFromElement;

var getPrescedingTextFromElementSiblings = function getPrescedingTextFromElementSiblings(element, windowSelection) {
  var prescedingText = ''; // response
  // get the previous sibling to start the loop

  var previousSibling = element.previousElementSibling; // loop through previous spans to get their text

  while (previousSibling) {
    // just in case the previousSibling just happens to be a part of the selection
    if (windowSelection && !windowSelection.containsNode(previousSibling)) {
      // prepend the spans innerText to the prescedingText
      prescedingText = previousSibling.textContent + prescedingText;
    } // move to the previous span, if none, it ends the loop


    previousSibling = previousSibling.previousElementSibling;
  }

  return prescedingText;
};
/**
 * This is a helper method to determine if the selection needs an ellipsis in
 * between the selected words or not.
 * @param {Array} selections - Array of word objects that the user selected
 * @param {string} verseText - The entire verse string from the current check
 * @returns {boolean} - Whether or not the View should display an ellipsis
 */


exports.getPrescedingTextFromElementSiblings = getPrescedingTextFromElementSiblings;

function shouldRenderEllipsis(selections, verseText) {
  /** Need to get the the words and occurrence of the selected edge words */
  var endSelectedWord = selections[selections.length - 1].text.trim();
  var endSelectedWordOccurrence = selections[selections.length - 1].occurrence;
  var beginningSelectedWord = selections[0].text.trim();
  var beginningSelectedWordOccurrence = selections[0].occurrence;
  /** Using the occurrences to get the actual index of the word vs
   *  the first time it appears in verse text */

  var indexOfBeginningSelection = verseText.split(beginningSelectedWord, beginningSelectedWordOccurrence).join(beginningSelectedWord).length;
  var indexOfEndSelection = verseText.split(endSelectedWord, endSelectedWordOccurrence).join(endSelectedWord).length;
  /** Checking the text in between selected words for a non space character */

  var textBetweenSelection = verseText.substring(indexOfBeginningSelection + beginningSelectedWord.length, indexOfEndSelection);
  /** If the end index is the same as the beginning then it is the first word */

  return indexOfEndSelection !== indexOfBeginningSelection && textBetweenSelection.match(/\S/);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9WZXJzZUNoZWNrL2hlbHBlcnMvd2luZG93U2VsZWN0aW9uSGVscGVycy5qcyJdLCJuYW1lcyI6WyJnZXRTZWxlY3Rpb25Gcm9tQ3VycmVudFdpbmRvd1NlbGVjdGlvbiIsImVudGlyZVRleHQiLCJzZWxlY3Rpb24iLCJ3aW5kb3dTZWxlY3Rpb24iLCJnZXRDdXJyZW50V2luZG93U2VsZWN0aW9uIiwic2VsZWN0ZWRUZXh0IiwiZ2V0U2VsZWN0ZWRUZXh0RnJvbVdpbmRvd1NlbGVjdGlvbiIsInByZXNjZWRpbmdUZXh0IiwiZ2V0UHJlc2NlZGluZ1RleHRGcm9tV2luZG93U2VsZWN0aW9uIiwic3RyaW5nSGVscGVycyIsImdlbmVyYXRlU2VsZWN0aW9uIiwid2luZG93IiwiZ2V0U2VsZWN0aW9uIiwiZW1wdHkiLCJ0b1N0cmluZyIsInNlbGVjdGlvblJhbmdlIiwiZ2V0UmFuZ2VBdCIsInNlbGVjdGlvblJhbmdlU3RhcnQiLCJzdGFydE9mZnNldCIsInRleHRDb250YWluZXIiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImVsZW1lbnQiLCJub2RlTmFtZSIsInBhcmVudEVsZW1lbnQiLCJzdGFydENvbnRhaW5lciIsImdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRBbmRTaWJsaW5ncyIsInByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRTaWJsaW5ncyIsImdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRTaWJsaW5ncyIsInByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnQiLCJnZXRQcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50IiwidGV4dCIsInRleHRDb250ZW50Iiwic2xpY2UiLCJwcmV2aW91c1NpYmxpbmciLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiY29udGFpbnNOb2RlIiwic2hvdWxkUmVuZGVyRWxsaXBzaXMiLCJzZWxlY3Rpb25zIiwidmVyc2VUZXh0IiwiZW5kU2VsZWN0ZWRXb3JkIiwibGVuZ3RoIiwidHJpbSIsImVuZFNlbGVjdGVkV29yZE9jY3VycmVuY2UiLCJvY2N1cnJlbmNlIiwiYmVnaW5uaW5nU2VsZWN0ZWRXb3JkIiwiYmVnaW5uaW5nU2VsZWN0ZWRXb3JkT2NjdXJyZW5jZSIsImluZGV4T2ZCZWdpbm5pbmdTZWxlY3Rpb24iLCJzcGxpdCIsImpvaW4iLCJpbmRleE9mRW5kU2VsZWN0aW9uIiwidGV4dEJldHdlZW5TZWxlY3Rpb24iLCJzdWJzdHJpbmciLCJtYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7QUFNTyxJQUFNQSxzQ0FBc0MsR0FBRyxTQUF6Q0Esc0NBQXlDLENBQUNDLFVBQUQsRUFBZ0I7QUFDcEUsTUFBSUMsU0FBSixDQURvRSxDQUNyRDs7QUFDZixNQUFNQyxlQUFlLEdBQUdDLHlCQUF5QixFQUFqRDtBQUNBLE1BQU1DLFlBQVksR0FBR0Msa0NBQWtDLENBQUNILGVBQUQsQ0FBdkQ7QUFDQSxNQUFNSSxjQUFjLEdBQUdDLG9DQUFvQyxDQUFDTCxlQUFELENBQTNELENBSm9FLENBS3BFOztBQUNBRCxFQUFBQSxTQUFTLEdBQUdPLGFBQWEsQ0FBQ0MsaUJBQWQsQ0FBZ0NMLFlBQWhDLEVBQThDRSxjQUE5QyxFQUE4RE4sVUFBOUQsQ0FBWjtBQUNBVSxFQUFBQSxNQUFNLENBQUNDLFlBQVAsR0FBc0JDLEtBQXRCO0FBQ0EsU0FBT1gsU0FBUDtBQUNELENBVE07QUFVUDs7Ozs7Ozs7O0FBS08sSUFBTUUseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUE0QjtBQUFBLFNBQU1PLE1BQU0sQ0FBQ0MsWUFBUCxFQUFOO0FBQUEsQ0FBbEM7QUFDUDs7Ozs7Ozs7OztBQU1PLElBQU1OLGtDQUFrQyxHQUFHLFNBQXJDQSxrQ0FBcUMsQ0FBQ0gsZUFBRDtBQUFBLFNBQXFCQSxlQUFlLENBQUNXLFFBQWhCLEVBQXJCO0FBQUEsQ0FBM0M7QUFDUDs7Ozs7Ozs7Ozs7OztBQVNPLElBQU1OLG9DQUFvQyxHQUFHLFNBQXZDQSxvQ0FBdUMsQ0FBQ0wsZUFBRCxFQUFxQjtBQUN2RSxN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QU9PLFNBQVM2QixvQkFBVCxDQUE4QkMsVUFBOUIsRUFBMENDLFNBQTFDLEVBQXFEO0FBQzFEO0FBQ0EsTUFBTUMsZUFBZSxHQUFHRixVQUFVLENBQUNBLFVBQVUsQ0FBQ0csTUFBWCxHQUFvQixDQUFyQixDQUFWLENBQWtDVixJQUFsQyxDQUF1Q1csSUFBdkMsRUFBeEI7QUFDQSxNQUFNQyx5QkFBeUIsR0FBR0wsVUFBVSxDQUFDQSxVQUFVLENBQUNHLE1BQVgsR0FBb0IsQ0FBckIsQ0FBVixDQUFrQ0csVUFBcEU7QUFDQSxNQUFNQyxxQkFBcUIsR0FBR1AsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjUCxJQUFkLENBQW1CVyxJQUFuQixFQUE5QjtBQUNBLE1BQU1JLCtCQUErQixHQUFHUixVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNNLFVBQXREO0FBRUE7OztBQUVBLE1BQU1HLHlCQUF5QixHQUFHUixTQUFTLENBQUNTLEtBQVYsQ0FBZ0JILHFCQUFoQixFQUF1Q0MsK0JBQXZDLEVBQXdFRyxJQUF4RSxDQUE2RUoscUJBQTdFLEVBQW9HSixNQUF0STtBQUNBLE1BQU1TLG1CQUFtQixHQUFHWCxTQUFTLENBQUNTLEtBQVYsQ0FBZ0JSLGVBQWhCLEVBQWlDRyx5QkFBakMsRUFBNERNLElBQTVELENBQWlFVCxlQUFqRSxFQUFrRkMsTUFBOUc7QUFFQTs7QUFDQSxNQUFNVSxvQkFBb0IsR0FBR1osU0FBUyxDQUFDYSxTQUFWLENBQW9CTCx5QkFBeUIsR0FBR0YscUJBQXFCLENBQUNKLE1BQXRFLEVBQThFUyxtQkFBOUUsQ0FBN0I7QUFDQTs7QUFDQSxTQUFRQSxtQkFBbUIsS0FBS0gseUJBQXpCLElBQXVESSxvQkFBb0IsQ0FBQ0UsS0FBckIsQ0FBMkIsSUFBM0IsQ0FBOUQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHN0cmluZ0hlbHBlcnMgZnJvbSAnLi9zdHJpbmdIZWxwZXJzJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBHZXRzIHRoZSBzZWxlY3Rpb24gb2JqZWN0IGZyb20gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0IGZyb20gdGhlIFdlYiBVSVxuICogQHBhcmFtIHtTdHJpbmd9IGVudGlyZVRleHQgLSB0aGUgdGV4dCB0aGF0IHRoZSBzZWxlY3Rpb24gc2hvdWxkIGJlIGluLCBpZSB2ZXJzZVRleHRcbiAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgc2VsZWN0aW9uIG9iamVjdCB0byBiZSB1c2VkXG4gKiBUT0RPOiBGaW5kIGEgd2F5IHRvIHRlc3RcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGlvbkZyb21DdXJyZW50V2luZG93U2VsZWN0aW9uID0gKGVudGlyZVRleHQpID0+IHtcbiAgbGV0IHNlbGVjdGlvbjsgLy8gcmVzcG9uc2VcbiAgY29uc3Qgd2luZG93U2VsZWN0aW9uID0gZ2V0Q3VycmVudFdpbmRvd1NlbGVjdGlvbigpO1xuICBjb25zdCBzZWxlY3RlZFRleHQgPSBnZXRTZWxlY3RlZFRleHRGcm9tV2luZG93U2VsZWN0aW9uKHdpbmRvd1NlbGVjdGlvbik7XG4gIGNvbnN0IHByZXNjZWRpbmdUZXh0ID0gZ2V0UHJlc2NlZGluZ1RleHRGcm9tV2luZG93U2VsZWN0aW9uKHdpbmRvd1NlbGVjdGlvbik7XG4gIC8vIFNvbWUgZWRnZSBjYXNlcyBsZWF2ZSBhIHdlaXJkIHNlbGVjdGlvbiByZW1haW5pbmcsIGxldCdzIGNsZWFuIHVwLlxuICBzZWxlY3Rpb24gPSBzdHJpbmdIZWxwZXJzLmdlbmVyYXRlU2VsZWN0aW9uKHNlbGVjdGVkVGV4dCwgcHJlc2NlZGluZ1RleHQsIGVudGlyZVRleHQpO1xuICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkoKTtcbiAgcmV0dXJuIHNlbGVjdGlvbjtcbn07XG4vKipcbiogQGRlc2NyaXB0aW9uIC0gR2V0cyB0aGUgd2luZG93J3MgU2VsZWN0aW9uIGZyb20gdGhlIFVJXG4qIEByZXR1cm4ge09iamVjdH0gd2luZG93U2VsZWN0aW9uIC0gYSB3aW5kb3dTZWxlY3Rpb24gb2JqZWN0IGZyb20gaW5zaWRlIGEgY29tcGF0aWJsZSBlbGVtZW50XG4qIFRPRE86IEZpbmQgYSB3YXkgdG8gdGVzdFxuKi9cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50V2luZG93U2VsZWN0aW9uID0gKCkgPT4gd2luZG93LmdldFNlbGVjdGlvbigpO1xuLyoqXG4qIEBkZXNjcmlwdGlvbiAtIEdldHMgdGhlIHdpbmRvdyBzZWxlY3RlZCB0ZXh0IGZyb20gdGhlIHdpbmRvd1NlbGVjdGlvblxuKiBAcGFyYW0ge09iamVjdH0gd2luZG93U2VsZWN0aW9uIC0gYSB3aW5kb3dTZWxlY3Rpb24gb2JqZWN0IGZyb20gaW5zaWRlIGEgY29tcGF0aWJsZSBlbGVtZW50XG4qIEByZXR1cm4ge1N0cmluZ30gLSBzZWxlY3RlZFRleHRcbiogVE9ETzogRmluZCBhIHdheSB0byB0ZXN0XG4qL1xuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkVGV4dEZyb21XaW5kb3dTZWxlY3Rpb24gPSAod2luZG93U2VsZWN0aW9uKSA9PiB3aW5kb3dTZWxlY3Rpb24udG9TdHJpbmcoKTtcbi8qKlxuKiBAZGVzY3JpcHRpb24gLSBHZXRzIHRoZSBwcmVzY2VkaW5nVGV4dCBmcm9tIHRoZSB3aW5kb3dTZWxlY3Rpb25cbiogQHBhcmFtIHtPYmplY3R9IHdpbmRvd1NlbGVjdGlvbiAtIGEgd2luZG93U2VsZWN0aW9uIG9iamVjdCBmcm9tIGluc2lkZSBhIGNvbXBhdGlibGUgZWxlbWVudFxuKiBAcmV0dXJuIHtTdHJpbmd9IC0gdGhlIHN0cmluZyBvZiBwcmVzY2VkaW5nVGV4dFxuKiBJbXBsZW1lbnRhdGlvbiBub3RlcyBvbiB3aHkgeW91IGNhbid0IGp1c3QgdXNlIHRoZSB3aW5kb3cuZ2V0U2VsZWN0aW9uKClcbiogZ2V0U2VsZWN0aW9uIGlzIGxpbWl0ZWQgYnkgc2FtZSBpbm5lclRleHQgbm9kZSwgYW5kIGRvZXMgbm90IGluY2x1ZGUgc3BhbiBzaWJsaW5nc1xuKiBpbmRleE9mVGV4dFNlbGVjdGlvbiBpcyBicm9rZW4gYnkgYW55IG90aGVyIHByZXZpb3VzIHNlbGVjdGlvbiBzaW5jZSBpdCBvbmx5IGtub3dzIGl0cyBpbm5lclRleHQgbm9kZS5cbiogVE9ETzogRmluZCBhIHdheSB0byB0ZXN0XG4qL1xuZXhwb3J0IGNvbnN0IGdldFByZXNjZWRpbmdUZXh0RnJvbVdpbmRvd1NlbGVjdGlvbiA9ICh3aW5kb3dTZWxlY3Rpb24pID0+IHtcbiAgbGV0IHByZXNjZWRpbmdUZXh0OyAvLyByZXNwb25zZVxuICAvLyBjb25jYXRlbmF0ZSBzcGFucyBldGMuLi4gdG8gZ2V0IHRoZSBwcmVzY2VkaW5nVGV4dCBmcm9tIHRoZSB3aW5kb3dTZWxlY3Rpb25cbiAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gZ2V0U2VsZWN0ZWRUZXh0RnJvbVdpbmRvd1NlbGVjdGlvbih3aW5kb3dTZWxlY3Rpb24pO1xuXG4gIC8vIGRvIG5vdGhpbmcgc2luY2UgYW4gZW1wdHkgc3BhY2Ugd2FzIHNlbGVjdGVkXG4gIGlmIChzZWxlY3RlZFRleHQgIT09ICcnKSB7XG4gICAgLy8gZ2V0IHRoZSB0ZXh0IGFmdGVyIHRoZSBwcmVzY2VkaW5nIHNlbGVjdGlvbiBhbmQgY3VycmVudCBzcGFuIHNlbGVjdGlvbiBpcyBpbi5cbiAgICBjb25zdCBzZWxlY3Rpb25SYW5nZSA9IHdpbmRvd1NlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIGluZGV4IG9mIHdoYXQgaXMgc2VsZWN0ZWQgaW4gY29udGV4dCBvZiB0aGUgc3BhbiBpdCBpcyBpbi5cbiAgICBjb25zdCBzZWxlY3Rpb25SYW5nZVN0YXJ0ID0gc2VsZWN0aW9uUmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgLy8gZ2V0IHRoZSBjb250YWluZXIgb2YgdGhlIHNlbGVjdGlvbiwgdGhpcyBpcyBhIHN0cmFuZ2Ugb2JqZWN0LCB0aGF0IGxvZ3MgYXMgYSBzdHJpbmcuXG4gICAgY29uc3QgdGV4dENvbnRhaW5lciA9IHNlbGVjdGlvblJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIC8vIGdldCB0aGUgcGFyZW50IHNwYW4gdGhhdCBjb250YWlucyB0aGUgdGV4dENvbnRhaW5lci5cblxuICAgIGxldCBlbGVtZW50O1xuXG4gICAgLy8gaWYgdGhlIHRleHRDb250YWluZXIgaXMgI3RleHQsIHRoZW4gdXNlIHRoZSBwYXJlbnRFbGVtZW50IC0gdXN1YWxseSBub24tb3ZlcmxhcHBpbmcgc2VsZWN0aW9uXG4gICAgaWYgKCcjdGV4dCcgPT09IHRleHRDb250YWluZXIubm9kZU5hbWUpIHtcbiAgICAgIGVsZW1lbnQgPSB0ZXh0Q29udGFpbmVyLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIHRleHRDb250YWluZXIgaXMgYSBzcGFuLCB0aGVuIHVzZSBpdCBhcyB0aGUgZWxlbWVudFxuICAgIGlmICgnU1BBTicgPT09IHRleHRDb250YWluZXIubm9kZU5hbWUpIHtcbiAgICAgIGVsZW1lbnQgPSB0ZXh0Q29udGFpbmVyO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSB0ZXh0Q29udGFpbmVyIGlzIGEgZGl2LCBpdHMgYW4gb3ZlcmxhcHBpbmcgc2VsZWN0aW9uLCBkb24ndCB1c2UgY29tbW9uQW5jZXN0b3JDb250YWluZXJcbiAgICBpZiAoJ0RJVicgPT09IHRleHRDb250YWluZXIubm9kZU5hbWUpIHtcbiAgICAgIGVsZW1lbnQgPSBzZWxlY3Rpb25SYW5nZS5zdGFydENvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBlbGVtZW50LCBhcyB0ZXh0Q29udGFpbmVyIGNhbiBidXQgcmFyZWx5IGJlIHNvbWV0aGluZyBvdGhlciB0aGFuICN0ZXh0LCBzcGFuIG9yIGRpdlxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBwcmVzY2VkaW5nVGV4dCA9IGdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRBbmRTaWJsaW5ncyhlbGVtZW50LCBzZWxlY3Rpb25SYW5nZVN0YXJ0LCB3aW5kb3dTZWxlY3Rpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJlc2NlZGluZ1RleHQ7XG59O1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBnZXRzIHRoZSBwcmVzY2VkaW5nVGV4dCBmcm9tIHRoZSBlbGVtZW50IGVuZGluZyBhdCB0aGUgc2VsZWN0aW9uUmFuZ2VTdGFydFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gdGhlIGh0bWwgZWxlbWVudCB0aGF0IGhhcyB0ZXh0IGFuZCBzaWJsaW5ncyB3aXRoIHRleHRcbiAqIEBwYXJhbSB7SW50fSBzZWxlY3Rpb25SYW5nZVN0YXJ0IC0gdGhlIGNoYXJhY3RlciBpbmRleCBvZiB0aGUgc3RhcnQgb2YgdGhlIHNlbGVjdGlvblxuICogQHJldHVybiB7U3RyaW5nfSAtIHRoZSBzdHJpbmcgb2YgcHJlc2NlZGluZ1RleHRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRBbmRTaWJsaW5ncyA9IChlbGVtZW50LCBzZWxlY3Rpb25SYW5nZVN0YXJ0LCB3aW5kb3dTZWxlY3Rpb24pID0+IHtcbiAgbGV0IHByZXNjZWRpbmdUZXh0OyAvLyByZXNwb25zZVxuICBjb25zdCBwcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50U2libGluZ3MgPSBnZXRQcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50U2libGluZ3MoZWxlbWVudCwgd2luZG93U2VsZWN0aW9uKTtcbiAgY29uc3QgcHJlc2NlZGluZ1RleHRGcm9tRWxlbWVudCA9IGdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnQoZWxlbWVudCwgc2VsZWN0aW9uUmFuZ2VTdGFydCwgd2luZG93U2VsZWN0aW9uKTtcbiAgcHJlc2NlZGluZ1RleHQgPSBwcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50U2libGluZ3MgKyBwcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50O1xuICByZXR1cm4gcHJlc2NlZGluZ1RleHQ7XG59O1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBnZXRzIHRoZSBwcmVzY2VkaW5nVGV4dCBmcm9tIHRoZSBlbGVtZW50IGVuZGluZyBhdCB0aGUgc2VsZWN0aW9uUmFuZ2VTdGFydFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gdGhlIGh0bWwgZWxlbWVudCB0aGF0IGhhcyB0ZXh0XG4gKiBAcGFyYW0ge0ludH0gc2VsZWN0aW9uUmFuZ2VTdGFydCAtIHRoZSBjaGFyYWN0ZXIgaW5kZXggb2YgdGhlIHN0YXJ0IG9mIHRoZSBzZWxlY3Rpb25cbiAqIEByZXR1cm4ge1N0cmluZ30gLSB0aGUgc3RyaW5nIG9mIHByZXNjZWRpbmdUZXh0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQcmVzY2VkaW5nVGV4dEZyb21FbGVtZW50ID0gKGVsZW1lbnQsIHNlbGVjdGlvblJhbmdlU3RhcnQpID0+IHtcbiAgbGV0IHByZXNjZWRpbmdUZXh0OyAvLyByZXNwb25zZVxuICBjb25zdCB0ZXh0ID0gZWxlbWVudC50ZXh0Q29udGVudDtcbiAgcHJlc2NlZGluZ1RleHQgPSB0ZXh0LnNsaWNlKDAsIHNlbGVjdGlvblJhbmdlU3RhcnQpO1xuICByZXR1cm4gcHJlc2NlZGluZ1RleHQ7XG59O1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBnZXRzIHRoZSBwcmVzY2VkaW5nVGV4dCBmcm9tIHRoZSBlbGVtZW50IHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSB0aGUgaHRtbCBlbGVtZW50IHRoYXQgaGFzIHRleHQgYW5kIHNpYmxpbmdzIHdpdGggdGV4dFxuICogQHJldHVybiB7U3RyaW5nfSAtIHRoZSBzdHJpbmcgb2YgcHJlc2NlZGluZ1RleHRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFByZXNjZWRpbmdUZXh0RnJvbUVsZW1lbnRTaWJsaW5ncyA9IChlbGVtZW50LCB3aW5kb3dTZWxlY3Rpb24pID0+IHtcbiAgbGV0IHByZXNjZWRpbmdUZXh0ID0gJyc7IC8vIHJlc3BvbnNlXG4gIC8vIGdldCB0aGUgcHJldmlvdXMgc2libGluZyB0byBzdGFydCB0aGUgbG9vcFxuICBsZXQgcHJldmlvdXNTaWJsaW5nID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gIC8vIGxvb3AgdGhyb3VnaCBwcmV2aW91cyBzcGFucyB0byBnZXQgdGhlaXIgdGV4dFxuICB3aGlsZSAocHJldmlvdXNTaWJsaW5nKSB7XG4gICAgLy8ganVzdCBpbiBjYXNlIHRoZSBwcmV2aW91c1NpYmxpbmcganVzdCBoYXBwZW5zIHRvIGJlIGEgcGFydCBvZiB0aGUgc2VsZWN0aW9uXG4gICAgaWYgKHdpbmRvd1NlbGVjdGlvbiAmJiAhd2luZG93U2VsZWN0aW9uLmNvbnRhaW5zTm9kZShwcmV2aW91c1NpYmxpbmcpKSB7XG4gICAgICAvLyBwcmVwZW5kIHRoZSBzcGFucyBpbm5lclRleHQgdG8gdGhlIHByZXNjZWRpbmdUZXh0XG4gICAgICBwcmVzY2VkaW5nVGV4dCA9IHByZXZpb3VzU2libGluZy50ZXh0Q29udGVudCArIHByZXNjZWRpbmdUZXh0O1xuICAgIH1cbiAgICAvLyBtb3ZlIHRvIHRoZSBwcmV2aW91cyBzcGFuLCBpZiBub25lLCBpdCBlbmRzIHRoZSBsb29wXG4gICAgcHJldmlvdXNTaWJsaW5nID0gcHJldmlvdXNTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIHByZXNjZWRpbmdUZXh0O1xufTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIG1ldGhvZCB0byBkZXRlcm1pbmUgaWYgdGhlIHNlbGVjdGlvbiBuZWVkcyBhbiBlbGxpcHNpcyBpblxuICogYmV0d2VlbiB0aGUgc2VsZWN0ZWQgd29yZHMgb3Igbm90LlxuICogQHBhcmFtIHtBcnJheX0gc2VsZWN0aW9ucyAtIEFycmF5IG9mIHdvcmQgb2JqZWN0cyB0aGF0IHRoZSB1c2VyIHNlbGVjdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2VUZXh0IC0gVGhlIGVudGlyZSB2ZXJzZSBzdHJpbmcgZnJvbSB0aGUgY3VycmVudCBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlIFZpZXcgc2hvdWxkIGRpc3BsYXkgYW4gZWxsaXBzaXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFJlbmRlckVsbGlwc2lzKHNlbGVjdGlvbnMsIHZlcnNlVGV4dCkge1xuICAvKiogTmVlZCB0byBnZXQgdGhlIHRoZSB3b3JkcyBhbmQgb2NjdXJyZW5jZSBvZiB0aGUgc2VsZWN0ZWQgZWRnZSB3b3JkcyAqL1xuICBjb25zdCBlbmRTZWxlY3RlZFdvcmQgPSBzZWxlY3Rpb25zW3NlbGVjdGlvbnMubGVuZ3RoIC0gMV0udGV4dC50cmltKCk7XG4gIGNvbnN0IGVuZFNlbGVjdGVkV29yZE9jY3VycmVuY2UgPSBzZWxlY3Rpb25zW3NlbGVjdGlvbnMubGVuZ3RoIC0gMV0ub2NjdXJyZW5jZTtcbiAgY29uc3QgYmVnaW5uaW5nU2VsZWN0ZWRXb3JkID0gc2VsZWN0aW9uc1swXS50ZXh0LnRyaW0oKTtcbiAgY29uc3QgYmVnaW5uaW5nU2VsZWN0ZWRXb3JkT2NjdXJyZW5jZSA9IHNlbGVjdGlvbnNbMF0ub2NjdXJyZW5jZTtcblxuICAvKiogVXNpbmcgdGhlIG9jY3VycmVuY2VzIHRvIGdldCB0aGUgYWN0dWFsIGluZGV4IG9mIHRoZSB3b3JkIHZzXG4gICAqICB0aGUgZmlyc3QgdGltZSBpdCBhcHBlYXJzIGluIHZlcnNlIHRleHQgKi9cbiAgY29uc3QgaW5kZXhPZkJlZ2lubmluZ1NlbGVjdGlvbiA9IHZlcnNlVGV4dC5zcGxpdChiZWdpbm5pbmdTZWxlY3RlZFdvcmQsIGJlZ2lubmluZ1NlbGVjdGVkV29yZE9jY3VycmVuY2UpLmpvaW4oYmVnaW5uaW5nU2VsZWN0ZWRXb3JkKS5sZW5ndGg7XG4gIGNvbnN0IGluZGV4T2ZFbmRTZWxlY3Rpb24gPSB2ZXJzZVRleHQuc3BsaXQoZW5kU2VsZWN0ZWRXb3JkLCBlbmRTZWxlY3RlZFdvcmRPY2N1cnJlbmNlKS5qb2luKGVuZFNlbGVjdGVkV29yZCkubGVuZ3RoO1xuXG4gIC8qKiBDaGVja2luZyB0aGUgdGV4dCBpbiBiZXR3ZWVuIHNlbGVjdGVkIHdvcmRzIGZvciBhIG5vbiBzcGFjZSBjaGFyYWN0ZXIgKi9cbiAgY29uc3QgdGV4dEJldHdlZW5TZWxlY3Rpb24gPSB2ZXJzZVRleHQuc3Vic3RyaW5nKGluZGV4T2ZCZWdpbm5pbmdTZWxlY3Rpb24gKyBiZWdpbm5pbmdTZWxlY3RlZFdvcmQubGVuZ3RoLCBpbmRleE9mRW5kU2VsZWN0aW9uKTtcbiAgLyoqIElmIHRoZSBlbmQgaW5kZXggaXMgdGhlIHNhbWUgYXMgdGhlIGJlZ2lubmluZyB0aGVuIGl0IGlzIHRoZSBmaXJzdCB3b3JkICovXG4gIHJldHVybiAoaW5kZXhPZkVuZFNlbGVjdGlvbiAhPT0gaW5kZXhPZkJlZ2lubmluZ1NlbGVjdGlvbikgJiYgdGV4dEJldHdlZW5TZWxlY3Rpb24ubWF0Y2goL1xcUy8pO1xufSJdfQ==