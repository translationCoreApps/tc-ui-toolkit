"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var stringHelpers = _interopRequireWildcard(require("../stringHelpers"));

describe('stringHelpers.isDeepNestedChild', function () {
  it('Returns true with a nested array as argument', function () {
    expect(stringHelpers.isDeepNestedChild(deepNestedChild)).toBeTruthy();
  });
  it('Returns false without a nested array as argument', function () {
    expect(stringHelpers.isDeepNestedChild([])).toBeFalsy();
  });
});
describe('stringHelpers.punctuationWordSpacing', function () {
  var tests = [{
    test: '',
    expected: ' '
  }, {
    test: ' .\'',
    expected: ''
  }, // last character APOSTROPHE - no space
  {
    test: ' ,"  ',
    expected: ' '
  }, {
    test: ':”  ',
    expected: ' '
  }, // last character SPACE - should add space
  {
    test: '  ;"',
    expected: ''
  }, // last character QUOTATION MARK - no space
  {
    test: '" ; \'',
    expected: ''
  }, // last character APOSTROPHE - no space
  {
    test: '   “',
    expected: ''
  }, // last character LEFT DOUBLE QUOTATION MARK - no space
  {
    test: '   ”',
    expected: ' '
  }, // last character RIGHT DOUBLE QUOTATION MARK - should add space
  {
    test: '    , ‘',
    expected: ''
  }, // last character LEFT SINGLE QUOTATION MARK - no space
  {
    test: '   ’',
    expected: ' '
  } // last character RIGHT SINGLE QUOTATION MARK - should add space
  ];

  var _loop = function _loop() {
    var test = _tests[_i];
    it('test: "' + test.test + '"', function () {
      expect(stringHelpers.punctuationWordSpacing({
        text: test.test
      })).toEqual(test.expected);
    });
  };

  for (var _i = 0, _tests = tests; _i < _tests.length; _i++) {
    _loop();
  }
});
describe('stringHelpers.isIsolatedLeftQuote', function () {
  var tests = [{
    test: '',
    expected: false
  }, {
    test: ' .\'',
    expected: false
  }, {
    test: ' ,"  ',
    expected: false
  }, {
    test: ':”  ',
    expected: false
  }, {
    test: '  ;"',
    expected: false
  }, // last character QUOTATION MARK - false
  {
    test: '"',
    expected: false
  }, // single QUOTATION MARK - false
  {
    test: '" ; \'',
    expected: false
  }, // last character APOSTROPHE - false
  {
    test: '\'',
    expected: false
  }, // single APOSTROPHE - false
  {
    test: '   “',
    expected: false
  }, // last character LEFT DOUBLE QUOTATION MARK - false
  {
    test: '“',
    expected: true
  }, // single LEFT DOUBLE QUOTATION MARK - true
  {
    test: '   ”',
    expected: false
  }, // last character RIGHT DOUBLE QUOTATION MARK - false
  {
    test: '”',
    expected: false
  }, // single RIGHT DOUBLE QUOTATION MARK - false
  {
    test: '    , ‘',
    expected: false
  }, // last character LEFT SINGLE QUOTATION MARK - false
  {
    test: '‘',
    expected: true
  }, // single LEFT SINGLE QUOTATION MARK - true
  {
    test: '   ’',
    expected: false
  }, // last character RIGHT SINGLE QUOTATION MARK - false
  {
    test: '’',
    expected: false
  } // single RIGHT SINGLE QUOTATION MARK - false
  ];

  var _loop2 = function _loop2() {
    var test = _tests2[_i2];
    it('test: "' + test.test + '"', function () {
      expect(stringHelpers.isIsolatedLeftQuote(test.test)).toEqual(test.expected);
    });
  };

  for (var _i2 = 0, _tests2 = tests; _i2 < _tests2.length; _i2++) {
    _loop2();
  }
}); // test data

var deepNestedChild = [[{
  content: [{
    children: [{
      content: [{}],
      occurrence: 1,
      occurrences: 2,
      tag: 'w',
      text: 'this',
      type: 'word'
    }, {
      content: [{}],
      occurrence: 1,
      occurrences: 1,
      tag: 'w',
      text: 'message',
      type: 'word'
    }],
    content: 'αὐτοῦ',
    lemma: 'αὐτός',
    morph: 'Gr,RP,,,3GMS,',
    occurrence: 1,
    occurrences: 1,
    strong: 'G08460',
    tag: 'zaln',
    type: 'milestone'
  }, {
    children: [{
      children: [{}],
      content: 'αὐτοῦ',
      lemma: 'αὐτός',
      morph: 'Gr,RP,,,3GMS,',
      occurrence: 1,
      occurrences: 1,
      strong: 'G08460',
      tag: 'zaln',
      type: 'milestone'
    }],
    content: 'λόγον',
    lemma: 'λόγος',
    morph: 'Gr,N,,,,,AMS,',
    occurrence: 1,
    occurrences: 1,
    strong: 'G30560',
    tag: 'zaln',
    type: 'milestone'
  }],
  occurrence: 1,
  occurrences: 2,
  tag: 'w',
  text: 'this',
  type: 'word'
}]];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,