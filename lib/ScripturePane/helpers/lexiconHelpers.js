"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lookupStrongsNumbers = exports.lexiconEntryIdFromStrongs = exports.lexiconIdFromStrongs = exports.containsValidStrongsNumber = exports.getStrongsParts = exports.getMorphKeys = exports.getWordParts = void 0;

var _wordAligner = require("word-aligner");

var ZERO_WIDTH_SPACE = "\u200B";
var ZERO_WIDTH_JOINER = "\u2060";
/**
 * splits a word by zero width spaces
 * @param {String} word - compound word to split
 * @return {Array} split parts
 */

var getWordParts = function getWordParts(word) {
  if (word) {
    var wordParts = [word];

    if (word.includes(ZERO_WIDTH_JOINER)) {
      wordParts = word.split(ZERO_WIDTH_JOINER);
    } else if (word.includes(ZERO_WIDTH_SPACE)) {
      wordParts = word.split(ZERO_WIDTH_SPACE);
    }

    return wordParts;
  }

  return [];
};
/**
 * splits morph of compound word into parts
 * @param {string} morph - morph string to convert
 * @return {Array} morphology for each part
 */


exports.getWordParts = getWordParts;

var getMorphKeys = function getMorphKeys(morph) {
  var morphKeys = _wordAligner.MorphUtils.getMorphLocalizationKeys(morph);

  var morphKeysForParts = [];
  var lastPos = 0;
  var pos = 0;
  var part;
  var divider = '*:';

  if ((pos = morphKeys.indexOf(divider)) >= 0) {
    while (pos >= 0) {
      part = morphKeys.slice(lastPos, pos);
      morphKeysForParts.push(part);
      lastPos = pos + 1;
      pos = morphKeys.indexOf(divider, lastPos);
    }

    part = morphKeys.slice(lastPos);

    if (part.length) {
      morphKeysForParts.push(part);
    }
  } else {
    morphKeysForParts.push(morphKeys);
  }

  return morphKeysForParts;
};
/**
 * checks for formats such as `c:d:H0776` and splits into parts
 * @param {String} strong - the strong's number to get the entryIds from
 * @return {Array} - list of parts
 */


exports.getMorphKeys = getMorphKeys;

var getStrongsParts = function getStrongsParts(strong) {
  if (strong) {
    var parts = strong.split(':');
    return parts;
  }

  return [];
};
/**
 * searches through the parts to see if there is a valid strongs number
 * @param strong
 * @return {boolean}
 */


exports.getStrongsParts = getStrongsParts;

var containsValidStrongsNumber = function containsValidStrongsNumber(strong) {
  var parts = getStrongsParts(strong);

  for (var i = 0, len = parts.length; i < len; i++) {
    var entryId = lexiconEntryIdFromStrongs(parts[i]);

    if (entryId) {
      return true;
    }
  }

  return false;
};
/**
 * @description - Get the lexiconIds from the strong's number
 * @param {String} strong - the strong's number to get the entryIds from
 * @return {String} - the id of the lexicon
 */


exports.containsValidStrongsNumber = containsValidStrongsNumber;

var lexiconIdFromStrongs = function lexiconIdFromStrongs(strong) {
  var lexiconId = strong && strong.startsWith('G') ? 'ugl' : 'uhl';
  return lexiconId;
};
/**
 * @description - Get the lexicon entryIds from the strong's number
 * @param {String} strong - the strong's number to get the entryIds from
 * @return {int} - the number of the entry
 */


exports.lexiconIdFromStrongs = lexiconIdFromStrongs;

var lexiconEntryIdFromStrongs = function lexiconEntryIdFromStrongs(strong) {
  if (strong) {
    var strongsCode = strong.replace(/\w/, '');

    if (!strong.startsWith('H')) {
      // Greek has an extra 0 at end
      strongsCode = strongsCode.slice(0, -1);
    }

    var entryId = strongsCode && parseInt(strongsCode) || 0;
    return entryId;
  }

  return 0;
};
/**
 * looks up the strongs numbers for each part of a multipart strongs
 * @param {String} strong
 * @param {Function} getLexiconData
 * @return {*}
 */


exports.lexiconEntryIdFromStrongs = lexiconEntryIdFromStrongs;

var lookupStrongsNumbers = function lookupStrongsNumbers(strong, getLexiconData) {
  var lexiconData = {};
  var parts = getStrongsParts(strong);

  for (var i = 0, len = parts.length; i < len; i++) {
    var part = parts[i];
    var entryId = lexiconEntryIdFromStrongs(part);

    if (entryId) {
      var lexiconId = lexiconIdFromStrongs(part);
      var lexiconData_ = getLexiconData(lexiconId, entryId);

      if (lexiconData_) {
        if (lexiconData && lexiconData_[lexiconId] && lexiconData_[lexiconId][entryId]) {
          // if already exists combine data
          if (!lexiconData[lexiconId]) {
            lexiconData[lexiconId] = {};
          }

          lexiconData[lexiconId][entryId] = lexiconData_[lexiconId][entryId];
        }
      }
    }
  }

  return lexiconData;
};

exports.lookupStrongsNumbers = lookupStrongsNumbers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,