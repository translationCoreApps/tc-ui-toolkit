'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWordArrayMatch = isWordArrayMatch;
exports.isWordMatch = isWordMatch;
exports.getWordHighlightedDetails = getWordHighlightedDetails;
exports.getWordsFromNestedMilestone = getWordsFromNestedMilestone;
exports.getDeepNestedWords = getDeepNestedWords;
exports.isPunctuationHighlighted = isPunctuationHighlighted;
exports.addSpace = addSpace;

var _react = _interopRequireDefault(require("react"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _stringHelpers = require("./stringHelpers");

var _usfmHelpers = require("./usfmHelpers");

function isWordArrayMatch(word, contextId) {
  var isMatch = false;

  if (word && word.content && Array.isArray(word.content) && contextId && contextId.quote) {
    isMatch = word.content.some(function (wordItem) {
      var foundMatch = false;

      if (Array.isArray(contextId.quote)) {
        for (var i = 0, l = contextId.quote.length; i < l; i++) {
          var quote = contextId.quote[i];

          if (quote.word === wordItem.content && quote.occurrence === wordItem.occurrence) {
            foundMatch = true;
            break;
          }
        }
      } else if (contextId.quote.split(' ').includes(wordItem.content)) {
        var stringOccurrence = contextId.occurrence;

        if (typeof stringOccurrence === 'string' && stringOccurrence.length === 0) {
          stringOccurrence = 1;
        }

        foundMatch = stringOccurrence === wordItem.occurrence;
      }

      return foundMatch;
    });
  }

  return isMatch;
}
/**
 * search word list to find occurrence of word
 * @param {number} index - position of word
 * @param {Array} words - list of word objects to search
 * @param {String} wordText - text to match
 * @param {number} occurrence - to match
 * @return {Boolean} - true if same occurrence
 */


function getOccurrenceOfWord(index, words, wordText, occurrence) {
  // get occurrence of word
  var _occurrence = 0;

  for (var i = 0; i <= index; i++) {
    var wordItem = words[i];

    if (wordItem.type === 'word' && wordItem.text === wordText) {
      _occurrence++;
    }
  }

  var isMatch = _occurrence === occurrence;
  return isMatch;
}
/**
 * see if this word is part of quote for current context id.
 * @param {Object} word
 * @param {Object} contextId
 * @param {Array} words
 * @param {number} index
 * @return {boolean} - true if in quote
 */


function isWordMatch(word, contextId, words, index) {
  var isMatch = false;

  try {
    if (word && word.text && contextId && contextId.quote) {
      if (Array.isArray(contextId.quote)) {
        // if list of words in quote see if this word matches one of the words
        for (var i = 0, l = contextId.quote.length; i < l; i++) {
          var quote = contextId.quote[i];

          if (quote.word === word.text) {
            isMatch = getOccurrenceOfWord(index, words, word.text, quote.occurrence);

            if (isMatch) {
              break;
            }
          } else if (word.text && word.text.includes('’') && word.text.replace('’', '') === quote.word) {
            var wordText = word.text.replace('’', ''); // Deep cloning array to avoid referencing the old array address in memory

            var newWords = JSON.parse(JSON.stringify(words)); // remove apostrophe from each word in the words array

            var wordsWithoutApostrophe = [];

            for (var _i = 0; _i <= index; _i++) {
              var wordItem = newWords[_i];

              if (wordItem.text && wordItem.text.includes('’')) {
                wordItem.text = wordItem.text.replace('’', '');
              }

              wordsWithoutApostrophe.push(wordItem);
            }

            isMatch = getOccurrenceOfWord(index, wordsWithoutApostrophe, wordText, quote.occurrence);

            if (isMatch) {
              break;
            }
          }
        }
      } else {
        // is string with one or more words
        var quotes = contextId.quote.split(' ');

        for (var _i2 = 0, _l = quotes.length; _i2 < _l; _i2++) {
          var _quote = quotes[_i2];

          if (_quote === word.text) {
            isMatch = getOccurrenceOfWord(index, words, _quote, contextId.occurrence);
          }
        }
      }
    }

    return isMatch;
  } catch (e) {
    console.error(e);
  }
}

function getWordHighlightedDetails(contextId, previousWord, word) {
  var isHighlightedWord = isWordArrayMatch(word, contextId);
  var isBetweenHighlightedWord = isHighlightedWord && previousWord && !(0, _isEqual["default"])(previousWord, word) && isWordArrayMatch(previousWord, contextId);
  return {
    isHighlightedWord: isHighlightedWord,
    isBetweenHighlightedWord: isBetweenHighlightedWord
  };
}

function getWordsFromNestedMilestone(nestedWords, contextId, index, previousWord, wordSpacing) {
  // if its an array of an array thus get deep nested words array.
  if (Array.isArray(nestedWords[0])) {
    nestedWords = getDeepNestedWords(nestedWords);
  }

  var isHighlightedWord = false;
  var isBetweenHighlightedWord = false;
  var nestedPreviousWord = previousWord;
  var nestedWordSpacing = wordSpacing;
  var wordSpans = [];

  for (var i = 0, len = nestedWords.length; i < len; i++) {
    var nestedWord = nestedWords[i];
    var nestedWordIndex = i;
    var wordsArray = nestedWords;
    var nestedWordSpanIndex = "".concat(index.toString(), "_").concat(nestedWordIndex.toString(), "_").concat(nestedWord.text);
    var nestedNextWord = wordsArray[index + 1];

    if ((0, _stringHelpers.isWord)(nestedWord)) {
      var padding = nestedWordSpacing;
      nestedWordSpacing = ' '; // spacing between words

      if (nestedPreviousWord && isPuntuationAndNeedsNoSpace(nestedPreviousWord)) {
        padding = '';
      }

      var highlightedDetails = getWordHighlightedDetails(contextId, nestedPreviousWord, nestedWord);
      isHighlightedWord = highlightedDetails.isHighlightedWord;
      isBetweenHighlightedWord = highlightedDetails.isBetweenHighlightedWord;
      nestedPreviousWord = nestedWord;
      var paddingSpanStyle = {
        backgroundColor: isBetweenHighlightedWord ? 'var(--highlight-color)' : 'transparent'
      };
      wordSpans.push(_react["default"].createElement("span", {
        key: nestedWordSpanIndex.toString()
      }, _react["default"].createElement("span", {
        style: paddingSpanStyle
      }, padding), _react["default"].createElement("span", {
        style: {
          backgroundColor: isHighlightedWord ? 'var(--highlight-color)' : ''
        }
      }, (0, _usfmHelpers.removeMarker)(nestedWord.text))));
    } else if (nestedWord.text) {
      nestedWordSpacing = (0, _stringHelpers.punctuationWordSpacing)(nestedWord); // spacing before words

      var text = (0, _usfmHelpers.removeMarker)(nestedWord.text);

      if (isPunctuationHighlighted(nestedPreviousWord, nestedNextWord, contextId)) {
        wordSpans.push(_react["default"].createElement("span", {
          key: nestedWordSpanIndex,
          style: {
            backgroundColor: 'var(--highlight-color)'
          }
        }, text));
      } else {
        wordSpans.push(_react["default"].createElement("span", {
          key: nestedWordSpanIndex
        }, text));
      }
    }
  }

  return {
    wordSpans: wordSpans,
    nestedPreviousWord: nestedPreviousWord,
    nestedWordSpacing: nestedWordSpacing
  };
}
/**
 * Determines if the previous word is a punctuation that
 * doesnt need spacing after it.
 * @param {Object} wordObject
 */


function isPuntuationAndNeedsNoSpace(wordObject) {
  return !(0, _stringHelpers.isWord)(wordObject) && wordObject.text === '"' || wordObject.text === '\'';
}
/**
 * Gets a words object array from a deep nested milestone.
 * @param {array} nestedWords
 */


function getDeepNestedWords(nestedWords) {
  var deepNestedWords = null;

  for (var i = 0, len = nestedWords.length; i < len; i++) {
    var nestedWord = nestedWords[i];

    if (nestedWord.text) {
      deepNestedWords = nestedWords;
    } else {
      deepNestedWords = getDeepNestedWords(nestedWord);
    }
  }

  return deepNestedWords;
}
/**
 * Determines if a punctuation should be highlighted or not.
 * @param {object} previousWord
 * @param {object} nextWord
 * @param {object} contextId
 * @returns {bool} true or false. highlighted or not highlighted.
 */


function isPunctuationHighlighted(previousWord, nextWord, contextId, words, index) {
  // handle nested previous words
  if (previousWord && Array.isArray(previousWord[0])) {
    var nestedPreviousWord = getDeepNestedWords(previousWord); // get the last item in the array

    previousWord = nestedPreviousWord[nestedPreviousWord.length - 1];
  } // handle nested next words


  if (nextWord) {
    if (Array.isArray(nextWord) || Array.isArray(nextWord[0])) {
      var nestedNextWords = getDeepNestedWords(nextWord);
      nextWord = nestedNextWords[0];
    }
  }

  var isPreviousWordMatch = previousWord && previousWord.content ? isWordArrayMatch(previousWord, contextId) : isWordMatch(previousWord, contextId, words, index - 1);
  var isNextWordMatch = nextWord && nextWord.content ? isWordArrayMatch(nextWord, contextId) : isWordMatch(nextWord, contextId, words, index + 1);

  if (previousWord && nextWord) {
    return isPreviousWordMatch && isNextWordMatch;
  } else if (previousWord) {
    return isPreviousWordMatch;
  } else if (nextWord) {
    return isNextWordMatch;
  } else {
    return false;
  }
}

var spaceCounter = 0;
/**
 * pushes a span to the array
 * @param {Array} verseSpan
 */

function addSpace(verseSpan) {
  verseSpan.push(_react["default"].createElement("span", {
    key: 'space_' + ++spaceCounter,
    style: {
      backgroundColor: 'transparent'
    }
  }, ' '));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,