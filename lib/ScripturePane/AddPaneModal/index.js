"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _Toolbar = _interopRequireDefault(require("@material-ui/core/Toolbar"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _reactBootstrap = require("react-bootstrap");

require("./AddPaneModal.styles.css");

var styles = {
  toolBar: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'var(--reverse-color)',
    backgroundColor: 'var(--accent-color-dark)',
    padding: '15px',
    width: '100%'
  },
  title: {
    marginLeft: 'auto',
    fontSize: '22px',
    fontWeight: '400'
  },
  closeButton: {
    marginLeft: 'auto'
  },
  dialogContent: {
    color: 'rgba(0, 0, 0, 0.6)',
    textAlign: 'center',
    padding: '0px 24px 24px',
    margin: '0px'
  },
  dialogActions: {
    height: '70px',
    padding: '10px',
    margin: '0px',
    borderTop: '1px solid var(--border-color)'
  },
  icon: {
    color: '#ffffff',
    width: 25,
    height: 25
  },
  iconButton: {
    padding: 0,
    width: 25,
    height: 25,
    marginTop: 5
  },
  body: {
    textAlign: 'center'
  },
  select: {
    margin: '0 auto',
    width: '300px'
  }
};

var AddPaneModal = function AddPaneModal(_ref) {
  var show = _ref.show,
      onHide = _ref.onHide,
      title = _ref.title,
      selectLanguageLabel = _ref.selectLanguageLabel,
      selectLabel = _ref.selectLabel,
      selectSourceLanguage = _ref.selectSourceLanguage,
      selectedPane = _ref.selectedPane,
      addNewBibleResource = _ref.addNewBibleResource,
      currentPaneSettings = _ref.currentPaneSettings,
      translate = _ref.translate,
      getAvailableScripturePaneSelections = _ref.getAvailableScripturePaneSelections;
  var panes = [];
  var availableResources = [];
  getAvailableScripturePaneSelections(availableResources);

  var _loop = function _loop(i, len) {
    var resource = availableResources[i];
    var _resource$manifest = resource.manifest,
        resource_title = _resource$manifest.resource_title,
        language_name = _resource$manifest.language_name,
        language_id = _resource$manifest.language_id;
    var displayText = '';

    if (resource.bibleId !== 'targetBible') {
      var languageId = resource.languageId !== 'originalLanguage' ? resource.languageId : translate('pane.original_language');
      displayText = "".concat(language_name, " (").concat(languageId, ")  (").concat(resource_title, ")");
    } else {
      displayText = "".concat(language_name, " (").concat(language_id, ")  (").concat(translate('pane.target_language'), ") (").concat(translate('pane.current_project'), ")");
    }

    var foundInCurrentPaneSettings = currentPaneSettings.findIndex(function (paneSetting) {
      return paneSetting.bibleId === resource.bibleId && paneSetting.languageId === resource.languageId;
    }) >= 0;
    panes.push(_react["default"].createElement("option", {
      key: "".concat(i).concat(resource.languageId, "_").concat(resource.bibleId),
      value: "".concat(resource.languageId, "_").concat(resource.bibleId),
      disabled: foundInCurrentPaneSettings
    }, displayText));
  };

  for (var i = 0, len = availableResources.length; i < len; i++) {
    _loop(i, len);
  }

  return _react["default"].createElement(_Dialog["default"], {
    open: show,
    onClose: onHide,
    fullWidth: true,
    maxWidth: "md"
  }, _react["default"].createElement(_Toolbar["default"], {
    style: styles.toolBar
  }, _react["default"].createElement("div", {
    style: styles.title
  }, title), _react["default"].createElement(_IconButton["default"], {
    color: "inherit",
    onClick: onHide,
    "aria-label": "Close",
    style: styles.closeButton
  }, _react["default"].createElement(_reactBootstrap.Glyphicon, {
    glyph: "remove"
  }))), _react["default"].createElement(_DialogContent["default"], {
    style: styles.dialogContent
  }, _react["default"].createElement("h4", {
    style: {
      marginBottom: '30px'
    }
  }, selectLanguageLabel), _react["default"].createElement(_reactBootstrap.FormControl, {
    componentClass: "select",
    style: styles.select,
    onChange: function onChange(e) {
      return selectSourceLanguage(e.target.value);
    }
  }, _react["default"].createElement("option", {
    value: ""
  }, selectLabel), panes)), _react["default"].createElement(_DialogActions["default"], {
    disableActionSpacing: true,
    style: styles.dialogActions
  }, _react["default"].createElement("button", {
    className: "btn-second",
    onClick: onHide
  }, translate('close')), selectedPane && _react["default"].createElement("button", {
    className: "btn-prime",
    onClick: addNewBibleResource
  }, translate('load'))));
};

AddPaneModal.propTypes = {
  show: _propTypes["default"].bool.isRequired,
  onHide: _propTypes["default"].func.isRequired,
  title: _propTypes["default"].string.isRequired,
  selectLanguageLabel: _propTypes["default"].string.isRequired,
  selectLabel: _propTypes["default"].string.isRequired,
  selectSourceLanguage: _propTypes["default"].func.isRequired,
  selectedPane: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].shape({
    bibleId: _propTypes["default"].string,
    languageId: _propTypes["default"].string
  })]),
  addNewBibleResource: _propTypes["default"].func.isRequired,
  currentPaneSettings: _propTypes["default"].array.isRequired,
  translate: _propTypes["default"].func.isRequired,
  getAvailableScripturePaneSelections: _propTypes["default"].func.isRequired
};
var _default = AddPaneModal;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,