"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var helpers = _interopRequireWildcard(require("../helpers"));

var _GroupItem = _interopRequireDefault(require("../GroupItem"));

var GroupItems = function GroupItems(_ref) {
  var changeCurrentContextId = _ref.changeCurrentContextId,
      groupData = _ref.groupData,
      activeGroupItemRef = _ref.activeGroupItemRef,
      filters = _ref.filters,
      manifest = _ref.manifest,
      contextId = _ref.contextId,
      isVerseFinished = _ref.isVerseFinished,
      isVerseValid = _ref.isVerseValid,
      currentToolName = _ref.currentToolName,
      getSelections = _ref.getSelections;
  var items = [];
  var index = 0;

  for (var i = 0, len = groupData.length; i < len; i++) {
    var groupItemData = groupData[i];

    if (!helpers.groupItemIsVisible(groupItemData, filters)) {
      continue;
    }

    var active = (0, _deepEqual["default"])(groupItemData.contextId, contextId);
    var useTargetLanguageBookName = manifest.target_language && manifest.target_language.book && manifest.target_language.book.name;
    var bookName = useTargetLanguageBookName ? manifest.target_language.book.name : manifest.project.name;
    var _groupItemData$contex = groupItemData.contextId.reference,
        chapter = _groupItemData$contex.chapter,
        verse = _groupItemData$contex.verse;
    items.push(_react["default"].createElement(_GroupItem["default"], {
      contextId: groupItemData.contextId,
      changeCurrentContextId: changeCurrentContextId,
      key: index,
      statusBadge: helpers.getStatusBadges(groupItemData, isVerseFinished(chapter, verse), isVerseValid(chapter, verse), currentToolName),
      activeGroupItemRef: active ? activeGroupItemRef : null,
      active: active,
      bookName: bookName,
      selectionText: getSelections(groupItemData.contextId)
    }));
    index++;
  }

  return items;
};

var _default = GroupItems;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Hcm91cE1lbnUvR3JvdXBJdGVtcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJHcm91cEl0ZW1zIiwiY2hhbmdlQ3VycmVudENvbnRleHRJZCIsImdyb3VwRGF0YSIsImFjdGl2ZUdyb3VwSXRlbVJlZiIsImZpbHRlcnMiLCJtYW5pZmVzdCIsImNvbnRleHRJZCIsImlzVmVyc2VGaW5pc2hlZCIsImlzVmVyc2VWYWxpZCIsImN1cnJlbnRUb29sTmFtZSIsImdldFNlbGVjdGlvbnMiLCJpdGVtcyIsImluZGV4IiwiaSIsImxlbiIsImxlbmd0aCIsImdyb3VwSXRlbURhdGEiLCJoZWxwZXJzIiwiZ3JvdXBJdGVtSXNWaXNpYmxlIiwiYWN0aXZlIiwidXNlVGFyZ2V0TGFuZ3VhZ2VCb29rTmFtZSIsInRhcmdldF9sYW5ndWFnZSIsImJvb2siLCJuYW1lIiwiYm9va05hbWUiLCJwcm9qZWN0IiwicmVmZXJlbmNlIiwiY2hhcHRlciIsInZlcnNlIiwicHVzaCIsImdldFN0YXR1c0JhZGdlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxPQVdiO0FBQUEsTUFWSkMsc0JBVUksUUFWSkEsc0JBVUk7QUFBQSxNQVRKQyxTQVNJLFFBVEpBLFNBU0k7QUFBQSxNQVJKQyxrQkFRSSxRQVJKQSxrQkFRSTtBQUFBLE1BUEpDLE9BT0ksUUFQSkEsT0FPSTtBQUFBLE1BTkpDLFFBTUksUUFOSkEsUUFNSTtBQUFBLE1BTEpDLFNBS0ksUUFMSkEsU0FLSTtBQUFBLE1BSkpDLGVBSUksUUFKSkEsZUFJSTtBQUFBLE1BSEpDLFlBR0ksUUFISkEsWUFHSTtBQUFBLE1BRkpDLGVBRUksUUFGSkEsZUFFSTtBQUFBLE1BREpDLGFBQ0ksUUFESkEsYUFDSTtBQUNKLE1BQU1DLEtBQUssR0FBRyxFQUFkO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQVo7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxHQUFHLEdBQUdaLFNBQVMsQ0FBQ2EsTUFBaEMsRUFBd0NGLENBQUMsR0FBR0MsR0FBNUMsRUFBaURELENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsUUFBTUcsYUFBYSxHQUFHZCxTQUFTLENBQUNXLENBQUQsQ0FBL0I7O0FBRUEsUUFBSSxDQUFDSSxPQUFPLENBQUNDLGtCQUFSLENBQTJCRixhQUEzQixFQUEwQ1osT0FBMUMsQ0FBTCxFQUF5RDtBQUN2RDtBQUNEOztBQUVELFFBQUllLE1BQU0sR0FBRywyQkFBUUgsYUFBYSxDQUFDVixTQUF0QixFQUFpQ0EsU0FBakMsQ0FBYjtBQUNBLFFBQUljLHlCQUF5QixHQUFHZixRQUFRLENBQUNnQixlQUFULElBQTRCaEIsUUFBUSxDQUFDZ0IsZUFBVCxDQUF5QkMsSUFBckQsSUFBNkRqQixRQUFRLENBQUNnQixlQUFULENBQXlCQyxJQUF6QixDQUE4QkMsSUFBM0g7QUFDQSxRQUFJQyxRQUFRLEdBQUdKLHlCQUF5QixHQUFHZixRQUFRLENBQUNnQixlQUFULENBQXlCQyxJQUF6QixDQUE4QkMsSUFBakMsR0FBd0NsQixRQUFRLENBQUNvQixPQUFULENBQWlCRixJQUFqRztBQVRvRCxnQ0FVVlAsYUFBYSxDQUFDVixTQVZKLENBVTVDb0IsU0FWNEM7QUFBQSxRQVUvQkMsT0FWK0IseUJBVS9CQSxPQVYrQjtBQUFBLFFBVXRCQyxLQVZzQix5QkFVdEJBLEtBVnNCO0FBWXBEakIsSUFBQUEsS0FBSyxDQUFDa0IsSUFBTixDQUNFLGdDQUFDLHFCQUFEO0FBQ0UsTUFBQSxTQUFTLEVBQUViLGFBQWEsQ0FBQ1YsU0FEM0I7QUFFRSxNQUFBLHNCQUFzQixFQUFFTCxzQkFGMUI7QUFHRSxNQUFBLEdBQUcsRUFBRVcsS0FIUDtBQUlFLE1BQUEsV0FBVyxFQUFFSyxPQUFPLENBQUNhLGVBQVIsQ0FBd0JkLGFBQXhCLEVBQXVDVCxlQUFlLENBQUNvQixPQUFELEVBQVVDLEtBQVYsQ0FBdEQsRUFBd0VwQixZQUFZLENBQUNtQixPQUFELEVBQVVDLEtBQVYsQ0FBcEYsRUFBc0duQixlQUF0RyxDQUpmO0FBS0UsTUFBQSxrQkFBa0IsRUFBRVUsTUFBTSxHQUFHaEIsa0JBQUgsR0FBd0IsSUFMcEQ7QUFNRSxNQUFBLE1BQU0sRUFBRWdCLE1BTlY7QUFPRSxNQUFBLFFBQVEsRUFBRUssUUFQWjtBQVFFLE1BQUEsYUFBYSxFQUFFZCxhQUFhLENBQUNNLGFBQWEsQ0FBQ1YsU0FBZjtBQVI5QixNQURGO0FBWUFNLElBQUFBLEtBQUs7QUFDTjs7QUFDRCxTQUFPRCxLQUFQO0FBQ0QsQ0ExQ0Q7O2VBNENlWCxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ2RlZXAtZXF1YWwnO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCBHcm91cEl0ZW0gZnJvbSAnLi4vR3JvdXBJdGVtJztcblxuY29uc3QgR3JvdXBJdGVtcyA9ICh7XG4gIGNoYW5nZUN1cnJlbnRDb250ZXh0SWQsXG4gIGdyb3VwRGF0YSxcbiAgYWN0aXZlR3JvdXBJdGVtUmVmLFxuICBmaWx0ZXJzLFxuICBtYW5pZmVzdCxcbiAgY29udGV4dElkLFxuICBpc1ZlcnNlRmluaXNoZWQsXG4gIGlzVmVyc2VWYWxpZCxcbiAgY3VycmVudFRvb2xOYW1lLFxuICBnZXRTZWxlY3Rpb25zLFxufSkgPT4ge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBncm91cERhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBncm91cEl0ZW1EYXRhID0gZ3JvdXBEYXRhW2ldO1xuXG4gICAgaWYgKCFoZWxwZXJzLmdyb3VwSXRlbUlzVmlzaWJsZShncm91cEl0ZW1EYXRhLCBmaWx0ZXJzKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZSA9IGlzRXF1YWwoZ3JvdXBJdGVtRGF0YS5jb250ZXh0SWQsIGNvbnRleHRJZCk7XG4gICAgbGV0IHVzZVRhcmdldExhbmd1YWdlQm9va05hbWUgPSBtYW5pZmVzdC50YXJnZXRfbGFuZ3VhZ2UgJiYgbWFuaWZlc3QudGFyZ2V0X2xhbmd1YWdlLmJvb2sgJiYgbWFuaWZlc3QudGFyZ2V0X2xhbmd1YWdlLmJvb2submFtZTtcbiAgICBsZXQgYm9va05hbWUgPSB1c2VUYXJnZXRMYW5ndWFnZUJvb2tOYW1lID8gbWFuaWZlc3QudGFyZ2V0X2xhbmd1YWdlLmJvb2submFtZSA6IG1hbmlmZXN0LnByb2plY3QubmFtZTtcbiAgICBjb25zdCB7IHJlZmVyZW5jZTogeyBjaGFwdGVyLCB2ZXJzZSB9IH0gPSBncm91cEl0ZW1EYXRhLmNvbnRleHRJZDtcblxuICAgIGl0ZW1zLnB1c2goXG4gICAgICA8R3JvdXBJdGVtXG4gICAgICAgIGNvbnRleHRJZD17Z3JvdXBJdGVtRGF0YS5jb250ZXh0SWR9XG4gICAgICAgIGNoYW5nZUN1cnJlbnRDb250ZXh0SWQ9e2NoYW5nZUN1cnJlbnRDb250ZXh0SWR9XG4gICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgIHN0YXR1c0JhZGdlPXtoZWxwZXJzLmdldFN0YXR1c0JhZGdlcyhncm91cEl0ZW1EYXRhLCBpc1ZlcnNlRmluaXNoZWQoY2hhcHRlciwgdmVyc2UpLCBpc1ZlcnNlVmFsaWQoY2hhcHRlciwgdmVyc2UpLCBjdXJyZW50VG9vbE5hbWUpfVxuICAgICAgICBhY3RpdmVHcm91cEl0ZW1SZWY9e2FjdGl2ZSA/IGFjdGl2ZUdyb3VwSXRlbVJlZiA6IG51bGx9XG4gICAgICAgIGFjdGl2ZT17YWN0aXZlfVxuICAgICAgICBib29rTmFtZT17Ym9va05hbWV9XG4gICAgICAgIHNlbGVjdGlvblRleHQ9e2dldFNlbGVjdGlvbnMoZ3JvdXBJdGVtRGF0YS5jb250ZXh0SWQpfVxuICAgICAgLz4sXG4gICAgKTtcbiAgICBpbmRleCsrO1xuICB9XG4gIHJldHVybiBpdGVtcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwSXRlbXM7XG4iXX0=