"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGroupData = getGroupData;
exports.scrollIntoView = scrollIntoView;
exports.scrollIntoViewEnd = scrollIntoViewEnd;
exports.inView = inView;
exports.isInViewport = isInViewport;
exports.getStatusBadges = getStatusBadges;
exports.makeStatusBadgeComponents = makeStatusBadgeComponents;
exports.getGlyphIcons = getGlyphIcons;
exports.groupIsVisible = exports.groupItemIsVisible = exports.getFilterCount = exports.MENU_ITEM_HEIGHT = exports.MENU_BAR_HEIGHT = void 0;

var _react = _interopRequireDefault(require("react"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _reactBootstrap = require("react-bootstrap");

var _InvalidatedIcon = _interopRequireDefault(require("../GroupsMenuFilter/InvalidatedIcon"));

var MENU_BAR_HEIGHT = 30;
exports.MENU_BAR_HEIGHT = MENU_BAR_HEIGHT;
var MENU_ITEM_HEIGHT = 38;
exports.MENU_ITEM_HEIGHT = MENU_ITEM_HEIGHT;

function getGroupData(groupsData, groupId) {
  var groupData;

  if (groupsData !== undefined) {
    groupData = groupsData[groupId];
  }

  return groupData;
}

var getFilterCount = function getFilterCount(filters) {
  return Object.keys(filters).filter(function (k) {
    return filters[k];
  }).length;
};
/**
 * @description - Determines if the item should be navigatable
 * @param {object} groupItemData
 * @returns {boolean}
 */


exports.getFilterCount = getFilterCount;

var groupItemIsVisible = function groupItemIsVisible(groupItemData, filters) {
  return !getFilterCount(filters) || filters.invalidated && groupItemData.invalidated || filters.reminders && groupItemData.reminders || filters.selections && groupItemData.selections || filters.noSelections && !groupItemData.selections || filters.verseEdits && groupItemData.verseEdits || filters.comments && groupItemData.comments;
};
/**
 * @description - Determines if the group is navigatable based on filters
 * @param {object} groupData
 * @returns {boolean}
 */


exports.groupItemIsVisible = groupItemIsVisible;

var groupIsVisible = function groupIsVisible(groupData, filters) {
  if (!getFilterCount(filters)) {
    return true;
  }

  for (var i = 0, len = groupData.length; i < len; i++) {
    var groupItemData = groupData[i];

    if (groupItemIsVisible(groupItemData, filters)) {
      return true;
    }
  }

  return false;
};
/**
 * scrolls into view, but will be toward top
 * @param {object} current
 */


exports.groupIsVisible = groupIsVisible;

function scrollIntoView(_ref) {
  var current = _ref.current;

  if (current && current.scrollIntoView) {
    current.scrollIntoView({
      block: 'start',
      behavior: 'smooth'
    });
  }
}
/**
 * scrolls into view, but will be toward bottom
 * @param {object} item
 */


function scrollIntoViewEnd(_ref2) {
  var current = _ref2.current;

  if (current && current.scrollIntoView) {
    current.scrollIntoView(false); // must use boolean value here because we are using an older chromium that does not yet support scrollIntoViewOptions
  }
}
/**
 *
* @description - Tests if the the two elements are in the scope of the window (scroll bar)
* The consts MENU_BAR_HEIGHT & MENU_ITEM_HEIGHT are set to account for the static window avialablity
* @param {object} currentGroupMenu - The current group menu header that is extended/actived (i.e. Metaphors)
* @param {object} currentGroupItem - The current group check item that is active (i.e. Luke 1:1)
*/


function inView(_ref3, _ref4) {
  var currentGroupMenu = _ref3.current;
  var currentGroupItem = _ref4.current;

  if (currentGroupMenu && currentGroupItem) {
    var rectGroup = currentGroupMenu.getBoundingClientRect();
    var rectItem = currentGroupItem.getBoundingClientRect();
    var viewHeight = Math.min(document.documentElement.clientHeight, window.innerHeight);
    return Math.abs(rectGroup.top - rectItem.top) + (MENU_BAR_HEIGHT + MENU_ITEM_HEIGHT * 2) <= viewHeight;
  }
}
/**
 * Checks if the react ref is vertically within the viewport.
 * @param ref - the react ref
 * @return {boolean}
 */


function isInViewport(ref) {
  if (ref && ref.current) {
    var offset = MENU_BAR_HEIGHT + MENU_ITEM_HEIGHT;
    var top = ref.current.getBoundingClientRect().top;
    return top >= 0 && top + offset <= window.innerHeight;
  } else {
    return false;
  }
}
/**
 * @description - gets the status badge component for the group menu row
 * @param {object} groupItemData
 * @param verseFinished
 * @param verseIsValid
 */


function getStatusBadges(groupItemData, verseFinished, verseIsValid) {
  var glyphs = [];

  if (groupItemData && groupItemData.contextId && groupItemData.contextId.reference) {
    // The below ifs are in order of precedence of the status badges we show
    if (groupItemData.invalidated || !verseIsValid) {
      glyphs.push('invalidated');
    }

    if (groupItemData.reminders) {
      glyphs.push('bookmark');
    }

    if (groupItemData.selections || verseFinished) {
      glyphs.push('ok');
    }

    if (groupItemData.verseEdits) {
      glyphs.push('pencil');
    }

    if (groupItemData.comments) {
      glyphs.push('comment');
    }
  }

  return makeStatusBadgeComponents(glyphs);
}
/**
 * @description - Takes an array of glyph names, gets their React components and then renders the status badge
 * with the first icon and then a mouse-over tooltip with the rest of the icons and a chip to say how many icons there are.
 * @param {*} glyphs
 */


function makeStatusBadgeComponents(glyphs) {
  var statusGlyphs = getGlyphIcons(glyphs);
  var mainGlyph = statusGlyphs[0];

  if (statusGlyphs.length > 1) {
    var tooltip = _server["default"].renderToString(statusGlyphs);

    return _react["default"].createElement("div", {
      className: "status-badge-wrapper"
    }, _react["default"].createElement("div", {
      className: "status-badge",
      "data-for": "groups-tooltip",
      "data-tip": tooltip,
      "data-html": "true",
      "data-place": "bottom",
      "data-effect": "float",
      "data-type": "light",
      "data-class": "group-menu-status-tooltip",
      "data-delay-hide": "100"
    }, mainGlyph, _react["default"].createElement("div", {
      className: "badge"
    }, statusGlyphs.length)));
  } else {
    return _react["default"].createElement("div", {
      className: "status-badge-wrapper"
    }, _react["default"].createElement("div", {
      className: "status-badge"
    }, mainGlyph));
  }
}
/**
 * @description - Takes an array of strings that are glyph names and gets the proper React component to render them
 * @param {array} glyphs
 */


function getGlyphIcons(glyphs) {
  var glyphicons = [];

  if (glyphs && glyphs.length) {
    for (var i = 0, len = glyphs.length; i < len; i++) {
      var glyph = glyphs[i];

      if (glyph === 'invalidated') {
        glyphicons.push(_react["default"].createElement("div", {
          key: glyph,
          className: 'glyphicon glyphicon-invalidated'
        }, _react["default"].createElement(_InvalidatedIcon["default"], {
          height: 16,
          width: 16
        })));
      } else {
        var className = 'status-icon-' + glyph;
        glyphicons.push(_react["default"].createElement(_reactBootstrap.Glyphicon, {
          key: glyph,
          glyph: glyph,
          className: className
        }));
      }
    }
  } else {
    glyphicons.push(_react["default"].createElement("div", {
      key: "blank",
      className: "glyphicon glyphicon-blank status-icon-blank"
    }));
  }

  return glyphicons;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,