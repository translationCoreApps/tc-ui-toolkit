"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Group = _interopRequireDefault(require("../Group"));

var _NoResults = _interopRequireDefault(require("../NoResults"));

var helpers = _interopRequireWildcard(require("../helpers"));

require("./Groups.styles.css");

// components
//helpers
var Groups = function Groups(_ref) {
  var changeCurrentContextId = _ref.changeCurrentContextId,
      filters = _ref.filters,
      _ref$groupsIndex = _ref.groupsIndex,
      groupsIndex = _ref$groupsIndex === void 0 ? [] : _ref$groupsIndex,
      _ref$groupsData = _ref.groupsData,
      groupsData = _ref$groupsData === void 0 ? {} : _ref$groupsData,
      getGroupProgress = _ref.getGroupProgress,
      groupMenuChangeGroup = _ref.groupMenuChangeGroup,
      groupMenuExpandSubMenu = _ref.groupMenuExpandSubMenu,
      isSubMenuExpanded = _ref.isSubMenuExpanded,
      manifest = _ref.manifest,
      contextId = _ref.contextId,
      translate = _ref.translate,
      getSelections = _ref.getSelections,
      isVerseFinished = _ref.isVerseFinished,
      isVerseValid = _ref.isVerseValid,
      currentToolName = _ref.currentToolName;

  var groupComponents = _react["default"].createElement(_NoResults["default"], {
    translate: translate
  });

  groupsIndex = groupsIndex.filter(function (groupIndex) {
    return Object.keys(groupsData).includes(groupIndex.id) && helpers.groupIsVisible(helpers.getGroupData(groupsData, groupIndex.id), filters);
  });

  if (groupsIndex.length) {
    groupComponents = [];

    var _loop = function _loop(i, len) {
      var groupIndex = groupsIndex[i];
      var groupId = groupIndex.id;
      var currentGroupData = helpers.getGroupData(groupsData, groupId);
      var active = contextId ? contextId.groupId === groupId : false;
      groupComponents.push(_react["default"].createElement(_Group["default"], {
        currentToolName: currentToolName,
        isVerseValid: isVerseValid,
        isVerseFinished: isVerseFinished,
        contextId: contextId,
        getSelections: getSelections,
        changeCurrentContextId: changeCurrentContextId,
        manifest: manifest,
        filters: filters,
        groupData: currentGroupData,
        isSubMenuExpanded: isSubMenuExpanded,
        groupIndex: groupIndex,
        active: active,
        key: groupIndex.id,
        progress: getGroupProgress(groupIndex, groupsData),
        groupMenuExpandSubMenu: groupMenuExpandSubMenu,
        openGroup: function openGroup() {
          return groupMenuChangeGroup(currentGroupData[0].contextId);
        }
      }));
    };

    for (var i = 0, len = groupsIndex.length; i < len; i++) {
      _loop(i, len);
    }
  }

  return _react["default"].createElement("div", {
    className: "groups"
  }, groupComponents);
};

Groups.propTypes = {
  changeCurrentContextId: _propTypes["default"].func.isRequired,
  filters: _propTypes["default"].object.isRequired,
  groupsIndex: _propTypes["default"].array.isRequired,
  groupsData: _propTypes["default"].object.isRequired,
  getGroupProgress: _propTypes["default"].func.isRequired,
  groupMenuChangeGroup: _propTypes["default"].func.isRequired,
  groupMenuExpandSubMenu: _propTypes["default"].func.isRequired,
  isSubMenuExpanded: _propTypes["default"].bool.isRequired,
  manifest: _propTypes["default"].object.isRequired,
  contextId: _propTypes["default"].object.isRequired,
  translate: _propTypes["default"].func.isRequired,
  getSelections: _propTypes["default"].func.isRequired,
  isVerseFinished: _propTypes["default"].func.isRequired,
  isVerseValid: _propTypes["default"].func.isRequired,
  currentToolName: _propTypes["default"].string.isRequired
};
var _default = Groups;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,